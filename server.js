/**
 * File: server.js
 * Author: Stef Timmermans
 * Date: 10 November 2023
 * Description:
 *   This is the entry point for the application. It holds
 *   the routes for the users, the boats, and the loads.
 *   It involves making JWTs through Auth0, and using
 *   Google Cloud Datastore to store the data. It is hosted
 *   on Gloogle Cloud App Engine.
 * 
 *   Some of this file's contents are based on existing
 *   code from the Oregon State University's CS 493 ecampus
 *   course.
 */

const express = require('express');                         // Express for web framework
const app = express();                                      // Create an Express app
const { Datastore } = require('@google-cloud/datastore');   // Google Cloud Datastore for noSQL database
const bodyParser = require('body-parser');                  // Body parser for parsing JSON
require('dotenv').config();                                 // Dotenv for environment variables
const jwt = require('express-jwt');                         // JWT for authentication
const jwksRsa = require('jwks-rsa');                        // JWKS for authentication
const { Datastore } = require('@google-cloud/datastore');

// Use EJS for templating
app.set('view engine', 'ejs');                              // Set EJS as templating engine
app.set('views', __dirname + '/views');                     // Set views directory

// Use express-openid-connect for authentication
// const { auth, requiresAuth } = require('express-openid-connect');

// Use body parser for parsing JSON
app.use(bodyParser.json());

// Keyile for local development
// const keyfile = './keyfile.json';

// Datastore for local development
// const datastore = new Datastore({ keyFilename: keyfile });

// Datastore for Google Cloud App Engine
//const datastore = new Datastore();

// Constants for the datastore
const USER = "User";
const BOAT = "Boat";
const LOAD = "Load";

// Secrets for JWT using the .env file
// const CLIENT_ID = process.env.CLIENT_ID;
// const CLIENT_SECRET = process.env.CLIENT_SECRET;
// const DOMAIN = process.env.DOMAIN;

// Configure express-openid-connect
// THIS NEEDS TO BE MODIFIED FOR THIS PROJECT
// https://www.npmjs.com/package/express-openid-connect
/*
app.use(auth({
    issuerBaseURL: `https://${DOMAIN}`,
    baseURL: 'https://hw2-timmerms.uw.r.appspot.com', // This needs to be changed for dev/prod mode
    clientID: CLIENT_ID,
    secret: CLIENT_SECRET,
    idpLogout: true,
    authRequired: false,
    auth0Logout: true,
    afterCallback: (req, res, session, decodedState) => {
        return res.redirect('/user-info');
    }
}));
*/

function fromDatastore(item) {
    item.id = item[Datastore.KEY].id;
    return item;
}

/*
// Enforce JWT authentication
const checkJwt = jwt({
    secret: jwksRsa.expressJwtSecret({
      cache: true,
      rateLimit: true,
      jwksRequestsPerMinute: 5,
      jwksUri: `https://${DOMAIN}/.well-known/jwks.json`
    }),
  
    // Validate the audience and the issuer.
    issuer: `https://${DOMAIN}/`,
    algorithms: ['RS256']
});

// Check JWT but don't enforce it
const checkJwtOptional = jwt({
    secret: jwksRsa.expressJwtSecret({
        cache: true,
        rateLimit: true,
        jwksRequestsPerMinute: 5,
        jwksUri: `https://${DOMAIN}/.well-known/jwks.json`
    }),

    // Validate but bypass throwing error if JWT is invalid
    issuer: `https://${DOMAIN}/`,
    algorithms: ['RS256'],
    credentialsRequired: false
});
*/

// Non-user types
/*
Boat
{ "id": 1234,      # automatically generated by Datastore
  "name": "Sea Witch",  # The name of the boat, a string
  "type": "Catamaran",   # The type of boat, power boat, sailboat, catamaran etc. a string
  "length": 28,          # The length of the boat, an integer
  "loads":[
   {"id": 5678,
    "self":"https://appspot.com/loads/5678"},
    {"id": 8765,
    "self":"https://appspot.com/loads/8765"}
  ], # This embedded list does NOT need to paginate.
 "self":"https://appspot.com/boats/1234"
}
Load
{ "id": 5678, # automatically generated by the Datastore
  "volume": 5,     # The volume of the load, an integer
  "carrier": {
    "id": 1234,
    "name": "Sea Witch",
    "self": "https://appspot.com/boats/1234"
  },  # The boat carrying the load
  "item": "LEGO Blocks",
  "creation_date": "10/18/2020" # Date the load was created
  "self":"https://appspot.com/loads/5678"
}
*/

/* ---- Begin User Model Functions ---- */

/**
 * Function: post_user
 * Parameters: N/A
 * Returns: Key of new user
 * Description:
 *   This function creates a new user in the datastore.
 *   A user's only property is their ID, which is
 *   automatically generated by the datastore.
 */
function post_user() {
    // Create a new user entity
    const key = datastore.key(USER);
    const new_user = {};

    // Save the new user entity and return the key
    return datastore.save({ "key": key, "data": new_user })
    .then(() => {
        return key;
    });
}

/**
 * Function: get_users
 * Parameters: None
 * Returns: JSON
 * Description:
 *   This function returns all users in the datastore,
 *   displaying their IDs. This is the only collection
 *   that does not need to be paginated.
 */
function get_users() {
    // Make a query to get all users
    const q = datastore.createQuery(USER);
    return datastore.runQuery(q).then((entities) => {
        return entities[0].map(fromDatastore);
    });
}

/* ---- End User Model Functions ---- */

/* ---- Begin Boat Model Functions ---- */

/**
 * Function: post_boat
 * Parameters: name, type, length
 * Returns: Key of new boat
 * Description:
 *   This function creates a new boat in the datastore. It
 *   takes in the appropriate authentication information
 *   (TODO) and the boat's name, type, and length. It then
 *   creates a new boat entity in the datastore with these
 *   properties and an empty list of loads.
 */
function post_boat(name, type, length) {
    // Create a new boat entity
    const key = datastore.key(BOAT);
    const new_boat = {
        "name": name,
        "type": type,
        "length": length,
        "loads": []
    };

    // Save the new boat entity and return the key
    return datastore.save({ "key": key, "data": new_boat })
    .then(() => {
        return key;
    });
}

/* ---- End Boat Model Functions ---- */

/* ---- Begin Load Model Functions ---- */

/**
 * Function: post_load
 * Parameters: volume, item
 * Returns: Key of new load
 * Description:
 *   This function creates a new load in the datastore. It
 *   takes in the appropriate authentication information
 *   (TODO) and the load's volume and item. It then creates
 *   a new load entity in the datastore with these properties,
 *   an empty carrier, and the current date.
 */
function post_load(volume, item) {
    // Get the current date, using US format
    // Enforce "MM/DD/YYYY" incase something weird happens with the testing suite
    const CURRENT_DATE = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
    });

    // Create a new load entity
    const key = datastore.key(LOAD);
    const new_load = {
        "volume": volume,
        "carrier": {},
        "item": item,
        "creation_date": CURRENT_DATE
    };

    // Save the new load entity and return the key
    return datastore.save({ "key": key, "data": new_load })
    .then(() => {
        return key;
    });
}

/* ---- End Load Model Functions ---- */

/* ---- Begin Boat/Load Model Functions ---- */

/* ---- End Boat/Load Model Functions ---- */

/* ---- Begin User Routes ---- */

/**
 * Route: POST /users
 * IMPLEMENTATION TBD
 */

/**
 * Route: GET /users
 * Parameters: None
 * Description:
 *   This route returns all users in the datastore,
 *   displaying their IDs. This is the only collection
 *   that does not need to be paginated.
 * Status Codes:
 *   200 - Users returned successfully.
 */
app.get('/users', (req, res) => {
    // Return all users in the datastore
    get_users()
    .then((users) => {
        res.status(200).json(users);
    })
    .catch((err) => {
        res.status(500).json({ Error: err });
    });
});

/* ---- End User Routes ---- */

/* ---- Begin Boat Routes ---- */

/* ---- End Boat Routes ---- */

/* ---- Begin Load Routes ---- */

/* ---- End Load Routes ---- */

// Listen to the App Engine-specified port, or 8080 otherwise
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}...`);
});
